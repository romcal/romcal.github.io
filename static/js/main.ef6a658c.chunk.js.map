{"version":3,"sources":["constants/calendars.ts","AppContext.tsx","stores/romcal.store.ts","components/Colors.tsx","components/AdditionalLineContent.tsx","components/Day.tsx","components/LoadingIndicator.tsx","components/CalendarContent.tsx","components/CalendarMenu.tsx","components/LocaleMenu.tsx","components/MonthPicker.tsx","components/CalendarToolbar.tsx","components/Calendar.tsx","components/RomcalHeaderLogo.tsx","components/Header.tsx","components/Headline.tsx","components/RomcalVersion.tsx","RomcalApp.tsx","reportWebVitals.ts","index.tsx"],"names":["CALENDARS","GeneralRoman","Americas","Argentina","Australia","Austria","Belgium","Bolivia","BosniaHerzegovina","Brazil","Canada","Chile","China","CostaRica","Croatia","CzechRepublic","Denmark","England","Europe","Finland","France","France_Paris","France_SaintDenis","France_Strasbourg","Germany","Greece","Guatemala","Hungary","India","Ireland","Italy","Japan","Lebanon","Lithuania","Malta","Mexico","Netherlands","NewZealand","Norway","Panama","Paraguay","Peru","Philippines","Poland","Portugal","PuertoRico","Romania","Russia","Scotland","Slovakia","Slovenia","Spain","SriLanka","Sweden","Switzerland","Ukraine","UnitedStates","Uruguay","Venezuela","Vietnam","Wales","stores","romcalStore","fetchingData","yearlyData","monthlyData","localeId","calendarId","currentYear","Date","getFullYear","currentMonth","getMonth","fetchRomcalData","a","length","calendar","romcal","Romcal","localizedCalendar","generateCalendar","then","Object","values","data","runInAction","Promise","resolve","getMonthData","filter","days","date","getUTCMonth","setCalendarId","id","setLocaleId","setDate","newYear","setPreviousMonth","newDate","subMonths","setNextMonth","addMonths","makeAutoObservable","this","AppContext","React","SingleColor","props","color","colorName","className","toLowerCase","capitalize","Colors","colors","colorNames","map","index","AdditionalLineContent","day","rank","includes","rankName","hdo","isHolyDayOfObligation","getDay","Container","styled","toPlainObject","obj","customLocaleId","name","dateExceptions","dateDef","precedence","allowSimilarRankItems","isOptional","i18nDef","seasons","seasonNames","periods","martyrology","titles","cycles","properCycle","properCycleName","sundayCycle","sundayCycleName","weekdayCycle","weekdayCycleName","psalterWeek","psalterWeekName","fromCalendarId","fromExtendedCalendars","weekday","Day","liturgicalDay","getDate","MonthTitle","format","Accordion","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","DayContainer","container","direction","justifyContent","alignItems","Grid","item","xs","Box","Tooltip","placement","title","DayNumber","MainTitle","slice","altDay","OptionalTitle","OrLabel","AccordionDetails","src","displayDataTypes","shouldCollapse","field","LoadingIndicator","sx","display","CircularProgress","CalendarContent","observer","useContext","MonthContainer","CalendarMenu","minWidth","marginRight","FormControl","fullWidth","InputLabel","variant","htmlFor","NativeSelect","value","onChange","event","target","keys","str","replace","c","toUpperCase","LocaleMenu","allLocales","LOCALE_IDS","reduce","acc","pkg","LOCALE_VAR_NAMES","entries","isoId","MonthPicker","marginTop","IconButton","onClick","DatePicker","label","views","minDate","newValue","renderInput","params","TextField","helperText","marginLeft","CalendarToolbar","Group","Calendar","RomcalHeaderLogo","href","Logo","alt","Header","HeaderLinksContainer","HeaderLink","underline","Link","Headline","HeadlineContainer","HeadlineFooter","Button","startIcon","RomcalVersion","VersionContainer","getVersion","theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","RomcalApp","Provider","LocalizationProvider","dateAdapter","AdapterDateFns","ThemeProvider","AppContainer","maxWidth","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ef6a658c.chunk.js","sourcesContent":["export const CALENDARS: Record<string, Promise<any>> = {\n  GeneralRoman: import('@romcal/calendar.general-roman'),\n  Americas: import('@romcal/calendar.americas'),\n  Argentina: import('@romcal/calendar.argentina'),\n  Australia: import('@romcal/calendar.australia'),\n  Austria: import('@romcal/calendar.austria'),\n  Belgium: import('@romcal/calendar.belgium'),\n  Bolivia: import('@romcal/calendar.bolivia'),\n  BosniaHerzegovina: import('@romcal/calendar.bosnia-herzegovina'),\n  Brazil: import('@romcal/calendar.brazil'),\n  Canada: import('@romcal/calendar.canada'),\n  Chile: import('@romcal/calendar.chile'),\n  China: import('@romcal/calendar.china'),\n  CostaRica: import('@romcal/calendar.costa-rica'),\n  Croatia: import('@romcal/calendar.croatia'),\n  CzechRepublic: import('@romcal/calendar.czech-republic'),\n  Denmark: import('@romcal/calendar.denmark'),\n  England: import('@romcal/calendar.england'),\n  Europe: import('@romcal/calendar.europe'),\n  Finland: import('@romcal/calendar.finland'),\n  France: import('@romcal/calendar.france'),\n  France_Paris: import('@romcal/calendar.france.paris'),\n  France_SaintDenis: import('@romcal/calendar.france.saint-denis'),\n  France_Strasbourg: import('@romcal/calendar.france.strasbourg'),\n  Germany: import('@romcal/calendar.germany'),\n  Greece: import('@romcal/calendar.greece'),\n  Guatemala: import('@romcal/calendar.guatemala'),\n  Hungary: import('@romcal/calendar.hungary'),\n  India: import('@romcal/calendar.india'),\n  Ireland: import('@romcal/calendar.ireland'),\n  Italy: import('@romcal/calendar.italy'),\n  Japan: import('@romcal/calendar.japan'),\n  Lebanon: import('@romcal/calendar.lebanon'),\n  Lithuania: import('@romcal/calendar.lithuania'),\n  Malta: import('@romcal/calendar.malta'),\n  Mexico: import('@romcal/calendar.mexico'),\n  Netherlands: import('@romcal/calendar.netherlands'),\n  NewZealand: import('@romcal/calendar.new-zealand'),\n  Norway: import('@romcal/calendar.norway'),\n  Panama: import('@romcal/calendar.panama'),\n  Paraguay: import('@romcal/calendar.paraguay'),\n  Peru: import('@romcal/calendar.peru'),\n  Philippines: import('@romcal/calendar.philippines'),\n  Poland: import('@romcal/calendar.poland'),\n  Portugal: import('@romcal/calendar.portugal'),\n  PuertoRico: import('@romcal/calendar.puerto-rico'),\n  Romania: import('@romcal/calendar.romania'),\n  Russia: import('@romcal/calendar.russia'),\n  Scotland: import('@romcal/calendar.scotland'),\n  Slovakia: import('@romcal/calendar.slovakia'),\n  Slovenia: import('@romcal/calendar.slovenia'),\n  Spain: import('@romcal/calendar.spain'),\n  SriLanka: import('@romcal/calendar.sri-lanka'),\n  Sweden: import('@romcal/calendar.sweden'),\n  Switzerland: import('@romcal/calendar.switzerland'),\n  Ukraine: import('@romcal/calendar.ukraine'),\n  UnitedStates: import('@romcal/calendar.united-states'),\n  Uruguay: import('@romcal/calendar.uruguay'),\n  Venezuela: import('@romcal/calendar.venezuela'),\n  Vietnam: import('@romcal/calendar.vietnam'),\n  Wales: import('@romcal/calendar.wales'),\n};\n","import * as React from 'react';\nimport { RomcalStore } from './stores';\n\nexport function createStores() {\n  return { romcalStore: new RomcalStore() };\n}\n\nexport const stores = createStores();\n\nexport const AppContext = React.createContext(stores);\n","import { addMonths, subMonths } from \"date-fns\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport Romcal, { BaseLiturgicalDay } from \"romcal\";\nimport { CALENDARS } from \"../constants/calendars\";\n\nexport class RomcalStore {\n\tfetchingData: boolean = false;\n\tyearlyData: BaseLiturgicalDay[][] = [];\n\tmonthlyData: BaseLiturgicalDay[][] = [];\n\tlocaleId: string = \"En\";\n\tcalendarId: string = \"GeneralRoman\";\n\tcurrentYear: number = new Date().getFullYear();\n\tcurrentMonth: number = new Date().getMonth();\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\n\tfetchRomcalData = async () => {\n\t\tif (this.yearlyData.length === 0) {\n\t\t\tconst calendar = (await CALENDARS[this.calendarId])[\n\t\t\t\t`${this.calendarId}_${this.localeId}`\n\t\t\t];\n\t\t\tconst romcal = new Romcal({ localizedCalendar: calendar });\n\t\t\tconst data = await romcal\n\t\t\t\t.generateCalendar(this.currentYear)\n\t\t\t\t.then(Object.values);\n\t\t\trunInAction(() => {\n\t\t\t\tthis.yearlyData = data;\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve();\n\t};\n\n\tgetMonthData = () => {\n\t\trunInAction(() => (this.fetchingData = true));\n\t\tthis.fetchRomcalData().then(() => {\n\t\t\tconst monthlyData = this.yearlyData.filter(\n\t\t\t\t(days) => new Date(days[0].date).getUTCMonth() === this.currentMonth\n\t\t\t);\n\t\t\trunInAction(() => {\n\t\t\t\tthis.monthlyData = monthlyData;\n\t\t\t\tthis.fetchingData = false;\n\t\t\t});\n\t\t});\n\t};\n\n\tsetCalendarId = (id: string): void => {\n\t\tthis.calendarId = id;\n\t\tthis.yearlyData = [];\n\t\tthis.getMonthData();\n\t};\n\n\tsetLocaleId = (id: string): void => {\n\t\tthis.localeId = id;\n\t\tthis.yearlyData = [];\n\t\tthis.getMonthData();\n\t};\n\n\tsetDate = (date: Date): void => {\n\t\tconst newYear = date.getFullYear();\n\t\tif (newYear !== this.currentMonth) this.yearlyData = [];\n\t\tthis.currentYear = newYear;\n\t\tthis.currentMonth = date.getMonth();\n\t\tthis.getMonthData();\n\t};\n\n\tsetPreviousMonth = (): void => {\n\t\tconst newDate = subMonths(\n\t\t\tnew Date(this.currentYear, this.currentMonth, 1),\n\t\t\t1\n\t\t);\n\t\tif (newDate.getFullYear() !== this.currentMonth) this.yearlyData = [];\n\t\tthis.currentYear = newDate.getFullYear();\n\t\tthis.currentMonth = newDate.getMonth();\n\t\tthis.getMonthData();\n\t};\n\n\tsetNextMonth = (): void => {\n\t\tconst newDate = addMonths(\n\t\t\tnew Date(this.currentYear, this.currentMonth, 1),\n\t\t\t1\n\t\t);\n\t\tif (newDate.getFullYear() !== this.currentMonth) this.yearlyData = [];\n\t\tthis.currentYear = newDate.getFullYear();\n\t\tthis.currentMonth = newDate.getMonth();\n\t\tthis.getMonthData();\n\t};\n}\n","import { capitalize } from '@mui/material';\nimport React from 'react';\nimport { Color } from 'romcal';\n\nexport function SingleColor(props: { color: Color; colorName: string }) {\n  const { color, colorName } = props;\n  return (\n    <>\n      <span className={`color-ship ${color.toLowerCase()}`} />\n      {capitalize(colorName)}\n    </>\n  );\n}\n\nexport default function Colors(props: { colors: Color[]; colorNames: string[] }) {\n  const { colors, colorNames } = props;\n  return (\n    <>\n      {colors.map((color, index) => (\n        <span key={index}>\n          {index > 0 ? ', ' : ''}\n          <SingleColor key={color} color={color} colorName={colorNames[index]} />\n        </span>\n      ))}\n    </>\n  );\n}\n","import { capitalize } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport React from 'react';\nimport { BaseLiturgicalDay } from 'romcal';\nimport Colors from './Colors';\n\nexport default function AdditionalLineContent(props: { day: BaseLiturgicalDay }) {\n  const { day } = props;\n  const rank = ['SUNDAY', 'WEEKDAY'].includes(day.rank) ? null : capitalize(day.rankName);\n  const hdo = day.isHolyDayOfObligation && new Date(day.date).getDay() !== 0 ? '(Holy Day of Obligation)' : null;\n\n  return (\n    <Container>\n      <Colors colors={day.colors} colorNames={day.colorNames} />\n      {day.colors.length && rank ? ',' : ''} {rank} {hdo}\n    </Container>\n  );\n}\n\nconst Container = styled('p')`\n  margin: 0;\n  font-family: 'EB Garamond', serif;\n  font-size: 0.9em;\n`;\n","import { Accordion, AccordionDetails, AccordionSummary, Box, Grid, Tooltip } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { format } from 'date-fns';\nimport React from 'react';\nimport { BaseLiturgicalDay, LiturgicalDay } from 'romcal';\nimport AdditionalLineContent from './AdditionalLineContent';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ReactJson from 'react-json-view';\n\nconst toPlainObject = (obj: BaseLiturgicalDay): BaseLiturgicalDay => ({\n  id: obj.id,\n  ...(obj.customLocaleId ? { customLocaleId: obj.customLocaleId } : {}),\n  name: obj.name,\n  date: obj.date,\n  ...(obj.dateExceptions ? { dateExceptions: obj.dateExceptions } : {}),\n  dateDef: obj.dateDef,\n  precedence: obj.precedence,\n  rank: obj.rank,\n  rankName: obj.rankName,\n  allowSimilarRankItems: obj.allowSimilarRankItems,\n  isHolyDayOfObligation: obj.isHolyDayOfObligation,\n  isOptional: obj.isOptional,\n  i18nDef: obj.i18nDef,\n  seasons: obj.seasons,\n  seasonNames: obj.seasonNames,\n  periods: obj.periods,\n  colors: obj.colors,\n  colorNames: obj.colorNames,\n  martyrology: obj.martyrology,\n  titles: obj.titles,\n  calendar: obj.calendar,\n  cycles: {\n    properCycle: obj.cycles.properCycle,\n    properCycleName: obj.cycles.properCycleName,\n    sundayCycle: obj.cycles.sundayCycle,\n    sundayCycleName: obj.cycles.sundayCycleName,\n    weekdayCycle: obj.cycles.weekdayCycle,\n    weekdayCycleName: obj.cycles.weekdayCycleName,\n    psalterWeek: obj.cycles.psalterWeek,\n    psalterWeekName: obj.cycles.psalterWeekName,\n  },\n  fromCalendarId: 'ProperOfTime',\n  fromExtendedCalendars: [],\n  ...(obj.weekday ? { weekday: toPlainObject(obj.weekday) as LiturgicalDay } : {}),\n});\n\nexport default function Day(props: { liturgicalDay: BaseLiturgicalDay[] }) {\n  const { liturgicalDay } = props;\n  const date = new Date(liturgicalDay[0].date);\n\n  return (\n    <>\n      {date.getDate() === 1 && <MonthTitle>{format(date, 'MMMM yyyy')}</MonthTitle>}\n      <Accordion\n        className={`dow-${date.getDay()} date-in-month-${date.getDate()}`}\n        TransitionProps={{ unmountOnExit: true }}\n      >\n        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n          <DayContainer container direction=\"row\" justifyContent=\"flex-start\" alignItems=\"flex-start\">\n            <Grid item xs={1}>\n              <Box>\n                <Tooltip placement=\"top-start\" title={format(date, 'EEEE')}>\n                  <DayNumber>{date.getDate()}</DayNumber>\n                </Tooltip>\n              </Box>\n            </Grid>\n            <Grid item xs>\n              <Box>\n                <MainTitle className={liturgicalDay[0].rank.toLowerCase()}>{liturgicalDay[0].name}</MainTitle>\n                <AdditionalLineContent day={liturgicalDay[0]} />\n                {liturgicalDay.length > 1 &&\n                  liturgicalDay.slice(1).map((altDay) => (\n                    <div key={altDay.id}>\n                      <OptionalTitle key={altDay.id} className={altDay.rank.toLowerCase()}>\n                        {altDay.isOptional ? <OrLabel>or: </OrLabel> : <></>}\n                        {altDay.name}\n                      </OptionalTitle>\n                      <AdditionalLineContent day={altDay} />\n                    </div>\n                  ))}\n              </Box>\n            </Grid>\n          </DayContainer>\n        </AccordionSummary>\n        <AccordionDetails>\n          <ReactJson\n            src={liturgicalDay.map((obj) => toPlainObject(obj))}\n            displayDataTypes={false}\n            shouldCollapse={(field) => ['dateDef', 'i18nDef', 'weekday'].includes(field.name ?? '')}\n            name={liturgicalDay[0].date}\n          />\n        </AccordionDetails>\n      </Accordion>\n    </>\n  );\n}\n\nconst DayContainer = styled(Grid)`\n  margin: 5px 0;\n`;\n\nconst MonthTitle = styled('h4')`\n  font-weight: 100;\n  font-family: 'Roboto', sans-serif;\n  font-size: 2em;\n`;\n\nconst DayNumber = styled('h4')`\n  font-family: 'EB Garamond', serif;\n  font-weight: normal;\n  font-size: 30px;\n  line-height: 30px;\n  text-align: right;\n  width: 30px;\n  margin: 0;\n`;\n\nconst MainTitle = styled('h5')`\n  font-weight: 500;\n  font-family: 'EB Garamond', serif;\n  vertical-align: baseline;\n  line-height: 30px;\n  margin: 0;\n\n  &::before {\n    content: '';\n    font-size: 25px;\n  }\n`;\n\nconst OptionalTitle = styled('h6')`\n  font-weight: 500;\n  font-family: 'EB Garamond', serif;\n  vertical-align: baseline;\n  line-height: 30px;\n  margin: 5px 0 0;\n\n  &::before {\n    content: '';\n    font-size: 25px;\n  }\n`;\n\nconst OrLabel = styled('span')`\n  font-size: 19px;\n  text-transform: none;\n  font-variant: normal;\n  font-weight: 400;\n`;\n","import styled from '@emotion/styled';\nimport { Box, CircularProgress } from '@mui/material';\nimport * as React from 'react';\n\nexport default function LoadingIndicator() {\n  return (\n    <Container sx={{ display: 'flex' }}>\n      <CircularProgress />\n    </Container>\n  );\n}\n\nconst Container = styled(Box)`\n  margin: 80px 0 50px;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n`;\n","import { styled } from '@mui/material/styles';\nimport { observer } from 'mobx-react';\nimport React, { useContext } from 'react';\nimport { AppContext } from '../AppContext';\nimport Day from './Day';\nimport LoadingIndicator from './LoadingIndicator';\n\ninterface Props {}\n\nconst CalendarContent = observer((props: Props) => {\n  const { romcalStore } = useContext(AppContext);\n  const { fetchingData, monthlyData } = romcalStore;\n\n  if (monthlyData.length === 0 && !fetchingData) {\n    romcalStore.getMonthData();\n  }\n\n  if (fetchingData) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <MonthContainer>\n      {monthlyData.map((day) => (\n        <Day liturgicalDay={day} key={day[0].date} />\n      ))}\n    </MonthContainer>\n  );\n});\n\nexport default CalendarContent;\n\nconst MonthContainer = styled('div')`\n  padding: 30px 10px;\n`;\n","import { Box, capitalize, FormControl, InputLabel, NativeSelect } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport React, { useContext } from 'react';\nimport { AppContext } from '../AppContext';\nimport { CALENDARS } from '../constants/calendars';\n\nconst toHumanName = (str: string): string =>\n  capitalize(\n    str\n      .replace(/_/g, ' / ')\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/\\s([a-z])/g, (c) => ` ${c.toUpperCase()}`),\n  );\n\nconst CalendarMenu = observer(() => {\n  const { romcalStore } = useContext(AppContext);\n  const { calendarId, setCalendarId } = romcalStore;\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (event.target.value) {\n      setCalendarId(event.target.value);\n    }\n  };\n\n  return (\n    <Box sx={{ minWidth: 120, marginRight: 2 }}>\n      <FormControl fullWidth>\n        <InputLabel variant=\"standard\" htmlFor=\"uncontrolled-native\">\n          Calendar\n        </InputLabel>\n        <NativeSelect id=\"calendar\" value={calendarId} onChange={handleChange}>\n          {Object.keys(CALENDARS).map((id) => (\n            <option key={id} value={id}>\n              {toHumanName(id)}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </Box>\n  );\n});\n\nexport default CalendarMenu;\n","import { Box, FormControl, InputLabel, NativeSelect } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport React, { useContext } from 'react';\nimport Romcal from 'romcal';\nimport { AppContext } from '../AppContext';\n\nconst LocaleMenu = observer(() => {\n  const { romcalStore } = useContext(AppContext);\n  const { localeId, setLocaleId } = romcalStore;\n\n  const allLocales = Romcal.LOCALE_IDS.reduce((acc: Record<string, string>, pkg, index) => {\n    acc[Romcal.LOCALE_VAR_NAMES[index]] = pkg;\n    return acc;\n  }, {});\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setLocaleId(event.target.value as string);\n  };\n\n  return (\n    <Box sx={{ minWidth: 120 }}>\n      <FormControl fullWidth>\n        <InputLabel variant=\"standard\" htmlFor=\"uncontrolled-native\">\n          Locale\n        </InputLabel>\n        <NativeSelect id=\"calendar\" value={localeId} onChange={handleChange}>\n          {Object.entries(allLocales).map(([id, isoId]) => (\n            <option key={id} value={id}>\n              {isoId}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </Box>\n  );\n});\n\nexport default LocaleMenu;\n","import styled from '@emotion/styled';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport { Box, IconButton, TextField, TextFieldProps } from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers';\nimport { observer } from 'mobx-react';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { AppContext } from '../AppContext';\n\nconst MonthPicker = observer(() => {\n  const { romcalStore } = useContext(AppContext);\n  const { currentYear, currentMonth } = romcalStore;\n\n  const previousMonth = () => romcalStore.setPreviousMonth();\n  const nextMonth = () => romcalStore.setNextMonth();\n\n  const datePickerChange = (newValue: Date | null) => {\n    if (newValue) {\n      romcalStore.setDate(newValue);\n    }\n  };\n\n  return (\n    <Container>\n      <Box sx={{ marginRight: 1, marginTop: 1 }}>\n        <IconButton color=\"primary\" onClick={previousMonth}>\n          <ArrowBackIcon />\n        </IconButton>\n      </Box>\n      <Box sx={{ minWidth: 120 }}>\n        <DatePicker\n          label=\"Month and Year\"\n          views={['year', 'month']}\n          minDate={new Date('1969-01-01')}\n          value={new Date(currentYear, currentMonth, 1)}\n          onChange={datePickerChange}\n          renderInput={(params: TextFieldProps) => <TextField {...params} variant=\"standard\" helperText={null} />}\n        />\n      </Box>\n      <Box sx={{ marginLeft: 1, marginTop: 1 }}>\n        <IconButton color=\"primary\" onClick={nextMonth}>\n          <ArrowForwardIcon />\n        </IconButton>\n      </Box>\n    </Container>\n  );\n});\n\nexport default MonthPicker;\n\nconst Container = styled('div')`\n  margin-top: 20px;\n  display: inline-flex;\n`;\n","import { Grid } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport React from 'react';\nimport CalendarMenu from './CalendarMenu';\nimport LocaleMenu from './LocaleMenu';\nimport MonthPicker from './MonthPicker';\n\nexport default function CalendarToolbar() {\n  return (\n    <Container container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n      <MonthPicker />\n      <Group>\n        <CalendarMenu />\n        <LocaleMenu />\n      </Group>\n    </Container>\n  );\n}\n\nconst Container = styled(Grid)`\n  margin-bottom: 0;\n`;\n\nconst Group = styled('div')`\n  margin-top: 20px;\n  display: inline-flex;\n`;\n","import { observer } from 'mobx-react';\nimport React from 'react';\nimport CalendarContent from './CalendarContent';\nimport CalendarToolbar from './CalendarToolbar';\n\nexport const Calendar = observer(() => {\n  return (\n    <>\n      <CalendarToolbar />\n      <CalendarContent />\n    </>\n  );\n});\n","import { styled } from '@mui/material/styles';\nimport * as React from 'react';\n\nexport default function RomcalHeaderLogo() {\n  return (\n    <a href=\"./\">\n      <Logo src=\"./romcal-logo.png\" alt=\"Romcal\" />\n    </a>\n  );\n}\n\nconst Logo = styled('img')`\n  max-height: 60px;\n  padding: 35px 20px 40px;\n`;\n","import { Box, Grid, Link } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport React from 'react';\nimport RomcalHeaderLogo from './RomcalHeaderLogo';\n\nexport default function Header() {\n  return (\n    <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n      <RomcalHeaderLogo />\n      <HeaderLinksContainer>\n        <HeaderLink href=\"https://github.com/romcal/romcal/blob/dev/README.md\" underline=\"hover\">\n          Documentation\n        </HeaderLink>\n\n        <HeaderLink href=\"https://github.com/romcal/romcal\" underline=\"hover\">\n          Source Code\n        </HeaderLink>\n      </HeaderLinksContainer>\n    </Grid>\n  );\n}\n\nconst HeaderLinksContainer = styled(Box)`\n  margin: 20px 0;\n`;\n\nconst HeaderLink = styled(Link)`\n  text-transform: uppercase;\n  margin: 10px;\n  font-weight: bold;\n  font-size: 0.9em;\n`;\n","import GitHubIcon from '@mui/icons-material/GitHub';\nimport { Button } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport React from 'react';\n\nexport default function Headline() {\n  return (\n    <HeadlineContainer>\n      <p>A JavaScript library that generates liturgical calendars of the Roman Rite of the Roman Catholic Church.</p>\n      <HeadlineFooter>\n        <Button variant=\"outlined\" href=\"https://github.com/romcal/romcal\" startIcon={<GitHubIcon />}>\n          See more\n        </Button>\n      </HeadlineFooter>\n    </HeadlineContainer>\n  );\n}\n\nconst HeadlineContainer = styled('div')`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 100;\n  font-size: 1.5em;\n  margin: 0 0 30px;\n  padding: 20px;\n  border-radius: 3px;\n  background-image: linear-gradient(135deg, #fcfaf8 0%, #faf7f4 100%);\n\n  > p {\n    margin: 0;\n    line-height: 1.4em;\n  }\n`;\n\nconst HeadlineFooter = styled('p')`\n  text-align: right;\n  padding-top: 10px;\n`;\n","import { styled } from '@mui/material/styles';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport Romcal from 'romcal';\n\nconst RomcalVersion = observer(() => {\n  return <VersionContainer>romcal v.{Romcal.getVersion()}</VersionContainer>;\n});\n\nexport default RomcalVersion;\n\nconst VersionContainer = styled('div')`\n  padding: 30px 10px;\n  text-align: center;\n  font-size: 0.8em;\n  color: #7f7f7f;\n  font-weight: 100;\n`;\n","import { LocalizationProvider } from '@mui/x-date-pickers';\nimport { Container, createTheme, ThemeProvider } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport React from 'react';\nimport { AppContext, stores } from './AppContext';\nimport { Calendar } from './components/Calendar';\nimport Header from './components/Header';\nimport Headline from './components/Headline';\nimport './RomcalApp.css';\nimport RomcalVersion from './components/RomcalVersion';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#ff5f3d',\n      main: '#D02611',\n      dark: '#970000',\n      contrastText: '#000',\n    },\n    secondary: {\n      light: '#4f5b62',\n      main: '#263238',\n      dark: '#000a12',\n      contrastText: '#fff',\n    },\n  },\n});\n\nfunction RomcalApp() {\n  return (\n    <AppContext.Provider value={stores}>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <ThemeProvider theme={theme}>\n          <AppContainer maxWidth=\"md\" fixed={true}>\n            <Header />\n            <Headline />\n            <Calendar />\n\t\t\t\t\t\t<RomcalVersion />\n          </AppContainer>\n        </ThemeProvider>\n      </LocalizationProvider>\n    </AppContext.Provider>\n  );\n}\n\nexport default RomcalApp;\n\nconst AppContainer = styled(Container)`\n  border-style: solid;\n  border-color: #fff;\n  border-width: 0;\n  border-left-width: thin;\n  border-right-width: thin;\n  background-color: rgba(255, 255, 2555, 0.9);\n  box-sizing: border-box;\n  min-height: 100vh;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport RomcalApp from './RomcalApp';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <RomcalApp />\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}